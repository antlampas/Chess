name: "Analyze and build"

on:
  push:
    branches: ["master"]
jobs:
  # analyze:
  #   name: Analyze
  #   runs-on: 'ubuntu-latest'
  #   timeout-minutes: ${{ (matrix.language == 'C++' && 120) || 360 }}
  #   permissions:
  #     security-events: write
  #     actions: read
  #     contents: read
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       language: ['c-cpp']
  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v4
  #   - name: Initialize CodeQL
  #     uses: github/codeql-action/init@v3
  #     with:
  #       languages: ${{ matrix.language }}
  #   - name: Autobuild
  #     uses: github/codeql-action/autobuild@v3
  #   - name: Perform CodeQL Analysis
  #     uses: github/codeql-action/analyze@v3
  #     with:
  #       category: "/language:${{matrix.language}}"
  # build-linux:
  #   name: Build on linux
  #   needs: analyze
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       build_type: [Debug]
  #       cpp_compiler: [g++,clang++]
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Set reusable strings
  #     id: strings
  #     shell: bash
  #     run: |
  #       echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
  #   - name: Configure CMake
  #     run: >
  #       cmake -B ${{ steps.strings.outputs.build-output-dir }}
  #       -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
  #       -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
  #       -S ${{ github.workspace }}
  #   - name: Build
  #     run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
  #   - name: Test
  #     working-directory: ${{ steps.strings.outputs.build-output-dir }}
  #     run: ctest --build-config ${{ matrix.build_type }}
  build-windows:
    name: Build on Windows
    # needs: analyze
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        build_type: [Debug]
        cpp_compiler: [g++,clang++,msvc]
    steps:
    - uses: actions/checkout@v3
    - name: Workaround test
      run: |
        Set-Location "C:\Program Files (x86)\Microsoft Visual Studio\Installer\"
        $InstallPath = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise"
        $componentsToRemove= @(
          "Microsoft.VisualStudio.Component.VC.14.33.17.3.ARM"
          "Microsoft.VisualStudio.Component.VC.14.33.17.3.ARM.Spectre"
          "Microsoft.VisualStudio.Component.VC.14.33.17.3.ARM64"
          "Microsoft.VisualStudio.Component.VC.14.33.17.3.ARM64.Spectre"
          "Microsoft.VisualStudio.Component.VC.14.33.17.3.x86.x64"
          "Microsoft.VisualStudio.Component.VC.14.33.17.3.x86.x64.Spectre"
          "Microsoft.VisualStudio.Component.VC.14.33.17.3.ATL"
          "Microsoft.VisualStudio.Component.VC.14.33.17.3.ATL.Spectre"
          "Microsoft.VisualStudio.Component.VC.14.33.17.3.ATL.ARM"
          "Microsoft.VisualStudio.Component.VC.14.33.17.3.ATL.ARM.Spectre"
          "Microsoft.VisualStudio.Component.VC.14.33.17.3.ATL.ARM64"
          "Microsoft.VisualStudio.Component.VC.14.33.17.3.ATL.ARM64.Spectre"
          "Microsoft.VisualStudio.Component.VC.14.33.17.3.MFC"
          "Microsoft.VisualStudio.Component.VC.14.33.17.3.MFC.Spectre"
          "Microsoft.VisualStudio.Component.VC.14.33.17.3.MFC.ARM"
          "Microsoft.VisualStudio.Component.VC.14.33.17.3.MFC.ARM.Spectre"
          "Microsoft.VisualStudio.Component.VC.14.33.17.3.MFC.ARM64"
          "Microsoft.VisualStudio.Component.VC.14.33.17.3.MFC.ARM64.Spectre"
        )
        [string]$workloadArgs = $componentsToRemove | ForEach-Object {" --remove " +  $_}
        $Arguments = ('/c', "vs_installer.exe", 'modify', '--installPath', "`"$InstallPath`"",$workloadArgs, '--quiet', '--norestart', '--nocache')
        # should be run twice
        $process = Start-Process -FilePath cmd.exe -ArgumentList $Arguments -Wait -PassThru -WindowStyle Hidden
        $process = Start-Process -FilePath cmd.exe -ArgumentList $Arguments -Wait -PassThru -WindowStyle Hidden
    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}
    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}
